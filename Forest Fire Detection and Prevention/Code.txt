
import  RPi.GPIO  as  GPIO	#  Import  Library  to  access  GPIO  PIN from  urllib.parse  import  urlparse
import  paho.mqtt.client  as  paho from  smbus2  import  SMBus   import  board
import  busio  as  io import  adafruit_mlx90614 from  time  import  sleep import  serial
import  time import  string import  pynmea2

from  mlx90614  import  MLX90614 import  os,sys
import  time
 
'GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)
 
#  Consider  complete  raspberry-pi  board' #  To  avoid  same  PIN  use  warning
  
#  Define  GPIO  to  LCD  mapping LCD_RS = 7
LCD_E	= 11
LCD_D4 = 12
LCD_D5 = 13
LCD_D6 = 15
LCD_D7 = 16
Buzzer_Pin  =  29
MQ6_Pin  =  18
Fire_Pin  =  21
LED_Pin  =  31

#  Define  PIN  for  Buzzer
#  Define  PIN  for  MQ2  Sensor
 
GPIO.setup(Buzzer_Pin,GPIO.OUT)	#  Set  pin  function  as  output
 
GPIO.setup(MQ6_Pin,GPIO.IN,pull_up_down=GPIO.PUD_UP) function  as  input GPIO.setup(Fire_Pin,GPIO.IN,pull_up_down=GPIO.PUD_UP) GPIO.setup(LCD_E,  GPIO.OUT)	#  E
GPIO.setup(LCD_RS,  GPIO.OUT)  #  RS GPIO.setup(LCD_D4,  GPIO.OUT)  #  DB4 GPIO.setup(LCD_D5,  GPIO.OUT)  #  DB5 GPIO.setup(LCD_D6,  GPIO.OUT)  #  DB6 GPIO.setup(LCD_D7,  GPIO.OUT)  #  DB7 GPIO.setup(LED_Pin,  GPIO.OUT)

i2c  =  io.I2C(board.SCL,  board.SDA,  frequency=100000) mlx  =  adafruit_mlx90614.MLX90614(i2c)



def  on_connect(self,  mosq,  obj,  rc): self.subscribe("Fan",  0)
 
#  Set  pin
 

def  on_publish(mosq,  obj,  mid): print("mid:  "  +  str(mid))
mqttc  =  paho.Client()	#  object  declaration #  Assign  event  callbacks
mqttc.on_connect  =  on_connect mqttc.on_publish  =  on_publish

url_str  =  os.environ.get('CLOUDMQTT_URL',  'tcp://broker.emqx.io:1883') url  =  urlparse(url_str)
mqttc.connect(url.hostname,  url.port)


#  Timing  constants E_PULSE  =  0.0005
E_DELAY  =  0.0005
delay  =  1
 


#  Define  some  device  constants
LCD_WIDTH  =  16	#  Maximum  characters  per  line LCD_CHR = True
LCD_CMD  =  False
LCD_LINE_1  =  0x80  #  LCD  RAM  address  for  the  1st  line LCD_LINE_2  =  0xC0  #  LCD  RAM  address  for  the  2nd  line LCD_LINE_3  =  0x90#  LCD  RAM  address  for  the  3nd  line

'''
Function  Name  :lcd_init()
Function  Description  :  this  function  is  used  to  initialized  lcd  by sending  the  different  commands
'''
def  lcd_init():
#  Initialise  display lcd_byte(0x33,LCD_CMD)  #  110011  Initialise lcd_byte(0x32,LCD_CMD)  #  110010  Initialise
lcd_byte(0x06,LCD_CMD)  #  000110  Cursor  move  direction lcd_byte(0x0C,LCD_CMD)  #  001100  Display  On,Cursor  Off,  Blink  Off lcd_byte(0x28,LCD_CMD)  #  101000  Data  length,  number  of  lines,  font  size lcd_byte(0x01,LCD_CMD)  #  000001  Clear  display
time.sleep(E_DELAY) '''
Function  Name  :lcd_byte(bits  ,mode)
Fuction  Name  :the  main  purpose  of  this  function  to  convert  the  byte data  into  bit  and  send  to  lcd  port
'''
def  lcd_byte(bits,  mode): #  Send  byte  to  data  pins #  bits  =  data
# mode = True	for character #	False  for  command
 


GPIO.output(LCD_RS,  mode)  #  RS


#  High  bits GPIO.output(LCD_D4,  False) GPIO.output(LCD_D5,  False) GPIO.output(LCD_D6,  False) GPIO.output(LCD_D7,  False) if  bits&0x10==0x10: GPIO.output(LCD_D4,  True) if  bits&0x20==0x20: GPIO.output(LCD_D5,  True) if  bits&0x40==0x40: GPIO.output(LCD_D6,  True) if  bits&0x80==0x80: GPIO.output(LCD_D7,  True)

#  Toggle  'Enable'  pin lcd_toggle_enable()

#  Low  bits GPIO.output(LCD_D4,  False) GPIO.output(LCD_D5,  False) GPIO.output(LCD_D6,  False) GPIO.output(LCD_D7,  False) if  bits&0x01==0x01: GPIO.output(LCD_D4,  True) if  bits&0x02==0x02: GPIO.output(LCD_D5,  True) if  bits&0x04==0x04: GPIO.output(LCD_D6,  True) if  bits&0x08==0x08: GPIO.output(LCD_D7,  True)
 


#  Toggle  'Enable'  pin lcd_toggle_enable() '''
Function  Name  :  lcd_toggle_enable()
Function  Description:basically  this  is  used  to  toggle  Enable  pin '''
def  lcd_toggle_enable():
#  Toggle  enable time.sleep(E_DELAY) GPIO.output(LCD_E,  True) time.sleep(E_PULSE) GPIO.output(LCD_E,  False) time.sleep(E_DELAY)
'''
Function  Name  :lcd_string(message,line) Function	Description  :print  the  data  on  lcd '''
def  lcd_string(message,line): #  Send  string  to  display

message  =  message.ljust(LCD_WIDTH,"  ")


lcd_byte(line,  LCD_CMD)


for  i  in  range(LCD_WIDTH): lcd_byte(ord(message[i]),LCD_CHR)

lcd_init()
lcd_string("welcome  ",LCD_LINE_1) time.sleep(0.5)
lcd_string("Fire  Detection  ",LCD_LINE_1) lcd_string("System  ",LCD_LINE_2)
 
time.sleep(0.5)
lcd_byte(0x01,LCD_CMD)  #  000001  Clear  display #  Define  delay  between  readings
delay  =  5


bus  =  SMBus(1)
sensor  =  MLX90614(bus,  address=0x5A) while  (1):
ambientTemp  =  "{:.2f}".format(mlx.ambient_temperature) targetTemp  =  "{:.2f}".format(mlx.object_temperature)

sleep(1)


print("Ambient  Temperature:",  ambientTemp,  "°C") print("Target  Temperature:",  targetTemp,"°C")

rc  =  mqttc.loop()
#Check  switch  pressed  or  not
if  GPIO.input(MQ6_Pin  )  ==  GPIO.LOW  or  GPIO.input(Fire_Pin)  ==  GPIO.LOW
:
lcd_string("Fire  Detected",LCD_LINE_1) lcd_string("Alaram  ON",LCD_LINE_2) print  ("Fire  Detected  and  Alaram  ON") port="/dev/ttyAMA0"
ser=serial.Serial(port,  baudrate=9600,  timeout=0.5) dataout  =  pynmea2.NMEAStreamReader() newdata=ser.readline()

if  "$GPRMC"  in  str(newdata): newmsg=pynmea2.parse(newdata.decode('utf-8')) lat=newmsg.latitude
lng=newmsg.longitude
gps  =  "Latitude="  +  str(lat)  +  "and  Longitude="  +  str(lng)
 
print(gps) print(newdata)
map_link  =  'http://maps.google.com/?q='  +  str(lat)  +  ','  + str(lng)#create  link  to  plot  location  on  Google  map



mqttc.publish("gas","1") GPIO.output(Buzzer_Pin,GPIO.HIGH)	#Buzzer  ON GPIO.output(LED_Pin,GPIO.LOW)	#LED  ON
else  :
lcd_string("Fire  Not  Detected",LCD_LINE_1) lcd_string("Alaram  OFF",LCD_LINE_2)
print  ("Fire  not  Detected  and  Alaram  OFF") GPIO.output(Buzzer_Pin,GPIO.LOW)	#Buzzer  OFF GPIO.output(LED_Pin,GPIO.HIGH)	#LED  OF
